import java.util.*;

class Main
{
   public static void main(String[] args)
   {
      String expression;
      int i, length;
      char ch;
      Scanner s = new Scanner(System.in);
      
      System.out.print("Enter the Expression: ");
      expression = s.next();
      
      Stack<Character> stack = new Stack<Character>();
      length = expression.length();
      
      for(i=0; i<length; i++)
      {
         ch = expression.charAt(i);
         if(ch=='(' || ch=='{' || ch=='[')
         {
            stack.push(ch);
         }
         else if(ch==')')
         {
            if(stack.isEmpty() || stack.pop() != '(')
            {
               System.out.println("\nUnbalanced Parentheses!");
               return;
            }
         }
         else if(ch=='}')
         {
            if(stack.isEmpty() || stack.pop() != '{')
            {
               System.out.println("\nUnbalanced Parentheses!");
               return;
            }
         }
         else if(ch==']')
         {
            if(stack.isEmpty() || stack.pop() != '[')
            {
               System.out.println("\nUnbalanced Parentheses!");
               return;
            }
         }
      }
      if(stack.isEmpty())
         System.out.println("\nBalanced Parentheses.");
   }
}
-----------------
Output

Enter the Expression: {}{}{}
Balanced Parentheses.
----------------------------------
Second Approach:

// Java program for checking 
// balanced brackets 
import java.util.*; 

public class BalancedBrackets { 

	// function to check if brackets are balanced 
	static boolean areBracketsBalanced(String expr) 
	{ 
		// Using ArrayDeque is faster than using Stack class 
		Deque<Character> stack 
			= new ArrayDeque<Character>(); 

		// Traversing the Expression 
		for (int i = 0; i < expr.length(); i++) 
		{ 
			char x = expr.charAt(i); 

			if (x == '(' || x == '[' || x == '{') 
			{ 
				// Push the element in the stack 
				stack.push(x); 
				continue; 
			} 

			// If current character is not opening 
			// bracket, then it must be closing. So stack 
			// cannot be empty at this point. 
			if (stack.isEmpty()) 
				return false; 
			char check; 
			switch (x) { 
			case ')': 
				check = stack.pop(); 
				if (check == '{' || check == '[') 
					return false; 
				break; 

			case '}': 
				check = stack.pop(); 
				if (check == '(' || check == '[') 
					return false; 
				break; 

			case ']': 
				check = stack.pop(); 
				if (check == '(' || check == '{') 
					return false; 
				break; 
			} 
		} 

		// Check Empty Stack 
		return (stack.isEmpty()); 
	} 

	// Driver code 
	public static void main(String[] args) 
	{ 
		String expr = "([{}])"; 

		// Function call 
		if (areBracketsBalanced(expr)) 
			System.out.println("Balanced "); 
		else
			System.out.println("Not Balanced "); 
	} 
} 

Output
Balanced
Time Complexity: O(n) 
Auxiliary Space: O(n) for stack. 
